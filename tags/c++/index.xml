<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on GeeTeng</title>
    <link>https://geeteng.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on GeeTeng</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://geeteng.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;知识回顾</title>
      <link>https://geeteng.github.io/posts/c&#43;&#43;/c&#43;&#43;learning/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://geeteng.github.io/posts/c&#43;&#43;/c&#43;&#43;learning/</guid>
      <description>静态多态和动态多态 静态多态 -&amp;gt; 函数重载、泛型编程（模板）&#xA;动态多态 -&amp;gt; 虚函数&#xA;静态多态带来了泛型设计的概念，比如STL库。&#xA;**区别：**静态多态调用发生在编译时，效率高；动态多态函数调用发生在运行时，会引入一些性能开销。&#xA;虚函数 在多态会使用到虚函数，通过基类访问派生类定义的函数。&#xA;它的特点是动态联编（函数的调用不是在编译时刻被确定的，而是在运行时刻被确定的）。&#xA;虚函数只能借助指针 / 引用达到多态的效果&#xA;class A { public: virtual void foo() { cout&amp;lt;&amp;lt;&amp;#34;A::foo() is called&amp;#34;&amp;lt;&amp;lt;endl; } }; class B:public A { public: void foo() { cout&amp;lt;&amp;lt;&amp;#34;B::foo() is called&amp;#34;&amp;lt;&amp;lt;endl; } }; int main(void) { A *a = new B(); a-&amp;gt;foo(); // 在这里，a虽然是指向A的指针，但是被调用的函数(foo)却是B的! return 0; } 纯虚函数 在基类中没有定义，在函数原型后加 =0&#xA;virtual void funtion1()=0 为什么会引入纯虚函数？&#xA;很多情况下，基类本身生成对象是不合理的。比如动物可以派生老虎、狮子等，但是动物生成对象不合理。&#xA;在派生类必须予以重写以实现多态性，含有纯虚函数的类称为抽象类，抽象类是不能生成对象的。&#xA;虚析构函数 虚析构函数的作用：当声明析构函数为虚函数时，执行 delete a; 会采用动态联编，首先调用派生类的析构函数，然后再调用基类的析构函数。</description>
    </item>
  </channel>
</rss>
