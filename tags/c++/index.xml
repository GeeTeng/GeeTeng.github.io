<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on GeeTeng</title>
    <link>https://geeteng.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on GeeTeng</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://geeteng.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式</title>
      <link>https://geeteng.github.io/posts/c&#43;&#43;/designpattern/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://geeteng.github.io/posts/c&#43;&#43;/designpattern/</guid>
      <description>简单工厂模式 Factory：工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象。&#xA;客户端代码无需关心类的实现细节，如果需要新增运算，只需要新增对应的派生类，并在工厂中添加逻辑。&#xA;class Operation { protected: double numberA; double numberB; public: void setNumberA(double a) { numberA = a; } void setNumberB(double b) { numberB = b; } virtual double GetResult() { double result = 0; return result; } virtual ~Operation() = default; }; class OperationAdd : public Operation { public: double GetResult() override { return numberA + numberB; } }; class OperationSub : public Operation { public: double GetResult() override { return numberA - numberB; } }; class OperationFactory { public: static std::unique_ptr&amp;lt;Operation&amp;gt; createOperation(char op) { switch (op) { case &amp;#39;+&amp;#39;: return std::make_unique&amp;lt;OperationAdd&amp;gt;(); case&amp;#39;-&amp;#39;: return std::make_unique&amp;lt;OperationSub&amp;gt;(); default: throw std::invalid_argument(&amp;#34;Invalid operation type&amp;#34;); break; } } }; int main() { try { char op; std::cin &amp;gt;&amp;gt; op; auto operation = OperationFactory::createOperation(op); double a, b; std::cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b; operation-&amp;gt;setNumberA(a); operation-&amp;gt;setNumberB(b); double result = operation-&amp;gt;GetResult(); std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl; } catch(const std::exception&amp;amp; ex) { std::cerr &amp;lt;&amp;lt; &amp;#34;Error &amp;#34; &amp;lt;&amp;lt; ex.</description>
    </item>
    <item>
      <title>C&#43;&#43;知识回顾</title>
      <link>https://geeteng.github.io/posts/c&#43;&#43;/c&#43;&#43;learning/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://geeteng.github.io/posts/c&#43;&#43;/c&#43;&#43;learning/</guid>
      <description>友元函数 全局函数做友元&#xA;class Building { friend void goodGuy(Building* building); public: Building() { m_SittingRoom = &amp;#34;客厅&amp;#34;; m_BedRoom = &amp;#34;卧室&amp;#34;; } public: std::string m_SittingRoom; // 客厅 private: std::string m_BedRoom; // 卧室 }; // 全局函数 void goodGuy(Building* building) { std::cout &amp;lt;&amp;lt; &amp;#34;好朋友全局函数正在访问：&amp;#34; &amp;lt;&amp;lt; building-&amp;gt;m_SittingRoom &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;好朋友全局函数正在访问：&amp;#34; &amp;lt;&amp;lt; building-&amp;gt;m_BedRoom &amp;lt;&amp;lt; std::endl; } int main() { Building building; // 输出：好朋友全局函数正在访问：客厅 goodGuy(&amp;amp;building);// 输出：好朋友全局函数正在访问：卧室 } 类做友元也是同样的道理&#xA;friend class GoodGuy;&#xA;类的成员函数也是同样的道理&#xA;friend void GoodGuy::visit();</description>
    </item>
  </channel>
</rss>
