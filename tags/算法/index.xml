<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on GeeTeng</title>
    <link>https://geeteng.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on GeeTeng</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://geeteng.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode日常刷题整理</title>
      <link>https://geeteng.github.io/posts/c&#43;&#43;/leetcode%E6%97%A5%E5%B8%B8%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://geeteng.github.io/posts/c&#43;&#43;/leetcode%E6%97%A5%E5%B8%B8%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>841. 钥匙和房间 我用的bfs方法，用一个indexused数组来标记是否该房间被访问过，将访问过的房间的钥匙不断加入到队列中。&#xA;最后遍历indexused数组，看是否所有房间都被访问过。&#xA;class Solution { public: bool canVisitAllRooms(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; rooms) { int n = rooms.size(); queue&amp;lt;int&amp;gt; q; vector&amp;lt;bool&amp;gt; indexused(n, false); q.push(0); indexused[0] = true; while(!q.empty()){ auto index = q.front(); q.pop(); for(int i = 0; i &amp;lt; rooms[index].size(); i ++) { int next = rooms[index][i]; if(!indexused[next]) { indexused[next] = true; q.push(next); } } } for(bool visited : indexused) { if(!visited) return false; } return true; } }; 注意点：&#xA;不能在房间号出队时标记为true，而是应该在房间号push之前，因为有可能会发生：&#xA;处理 0，访问 1和 2，q = [1, 2]</description>
    </item>
    <item>
      <title>剑指Offer</title>
      <link>https://geeteng.github.io/posts/c&#43;&#43;/%E5%89%91%E6%8C%87offer/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://geeteng.github.io/posts/c&#43;&#43;/%E5%89%91%E6%8C%87offer/</guid>
      <description>剑指offer JZ8 二叉树的下一个节点 先找到传入节点所在树的根节点，然后用一个数组存储好中序遍历的节点。就可以顺序查找到下一个节点了。&#xA;vector&amp;lt;TreeLinkNode*&amp;gt; node; TreeLinkNode* GetNext(TreeLinkNode* pNode) { if(pNode == nullptr) return nullptr; TreeLinkNode* root = pNode; while(root-&amp;gt;next) { root = root-&amp;gt;next; } inOrder(root); for(int i = 0; i &amp;lt; node.size(); i ++) { if(node[i] == pNode) return node[i + 1]; } return nullptr; } void inOrder(TreeLinkNode* pNode) { if(pNode == nullptr) return; inOrder(pNode-&amp;gt;left); node.push_back(pNode); inOrder(pNode-&amp;gt;right); } JZ11 旋转数组的最小数字 旋转数组左边数组大于右边数组，所以如果中间元素大于右边元素的话，最小值在右边。如果中间元素小于右边，那么最小值在左边。如果中间元素等于右边元素，则无法判断，一个个移动。&#xA;int minNumberInRotateArray(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int l = 0, r = nums.</description>
    </item>
    <item>
      <title>LeetCode热题100</title>
      <link>https://geeteng.github.io/posts/c&#43;&#43;/leetcodehot100/</link>
      <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://geeteng.github.io/posts/c&#43;&#43;/leetcodehot100/</guid>
      <description>LeetCodeHot100 双指针 15. 三数之和 将找三个数转换成找两个数的问题，target = -k，将数组排序，每个不重复的数字都会成为target。&#xA;i要从大于k的地方开始寻找，j从数组结尾开始寻找。遇到相同数字时，要跳过，这些是为了防止找到重复的元素。&#xA;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; threeSum(vector&amp;lt;int&amp;gt;&amp;amp; nums) {&#xD;sort(nums.begin(), nums.end());&#xD;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res;&#xD;for (int k = 0; k &amp;lt; nums.size(); k++) {&#xD;if (nums[k] &amp;gt; 0) break;&#xD;if (k &amp;gt; 0 &amp;amp;&amp;amp; nums[k] == nums[k - 1]) continue;&#xD;int target = -nums[k];&#xD;int i = k + 1, j = nums.size() - 1;&#xD;while (i &amp;lt; j) {&#xD;if (nums[j] + nums[i] &amp;gt; target) j--;&#xD;else if (nums[j] + nums[i] &amp;lt; target) i++;&#xD;else {&#xD;res.</description>
    </item>
  </channel>
</rss>
